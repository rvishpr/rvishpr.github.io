<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-09-14T21:29:39-07:00</updated><id>/feed.xml</id><title type="html">Vishnu Raghavan</title><subtitle>Capturing my thoughts on things I learn or whatever has captured my attention recently.</subtitle><entry><title type="html">Enterprise software development cycles - a subjective take</title><link href="/blog/2022/03/15/enterprise-software-cycles.html" rel="alternate" type="text/html" title="Enterprise software development cycles - a subjective take" /><published>2022-03-15T09:21:30-07:00</published><updated>2022-03-15T09:21:30-07:00</updated><id>/blog/2022/03/15/enterprise-software-cycles</id><content type="html" xml:base="/blog/2022/03/15/enterprise-software-cycles.html">&lt;p&gt;Entire books can be written about how software is developed in different organizations. Small startups usually operate very differently from large enterprises when it comes to developing, testing, and deploying software. Even among large companies, this changes based on whether it’s a company serving consumers directly or if they serve other businesses. This is to document my experiences working on enterprise software - software that is used by and sold to other businesses - over the last decade.&lt;/p&gt;

&lt;h2 id=&quot;what-is-enterprise-software&quot;&gt;What is enterprise software?&lt;/h2&gt;

&lt;p&gt;Let’s start with the Wikipedia definition of this.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Enterprise software is a collection of computer programs that have common business applications, tools for modeling how the entire organization works, and development tools for building applications unique to the organization. The software is intended to solve an enterprise-wide problem, rather than a departmental problem. Enterprise-level software aims to improve the enterprise’s productivity and efficiency by providing business logic support functionality.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This involves software for, say, CRM, or large databases used by businesses, or software running on switches and routers in the internet backbone and the network edge, software for payment processing systems, mainframe systems, etc. This is very different from developing an iOS or Android application directly used by consumers or even consumer facing software from large firms such as Uber, Facebook(Meta?) or Netflix. I’m talking about companies like Oracle or Cisco or IBM.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/software-companies-spectrum.webp&quot; alt=&quot;Software companies spectrum&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are of course companies that fit in the middle of this spectrum. A prime example can be something like Stripe - which helps businesses of all sizes and shapes do e-commerce. Companies like Google and Amazon fit here as well since they do a mix of enterprise (AWS, Google Cloud, Ads) and consumer facing software (music, email, photos, payments). Among other reasons, here I see the barrier as thin, since the flow of ideas and people from one area to the other happens more freely. The culture and operating model for the business is still different enough from the large-enterprise focused companies such as Intel or Cisco.&lt;/p&gt;

&lt;p&gt;The software cycles are typically longer (months rather than weeks or days) and updates are released quarterly or (in some cases even annually). This is in contrast with companies like Uber, where software changes more frequently, sometimes daily and the companies pride themselves on this aspect of their culture (&lt;a href=&quot;https://eng.uber.com/micro-deploy-code/&quot;&gt;Uber Engineering’s Micro Deploy&lt;/a&gt; - this is from 2017, but I’d think still relevant).&lt;/p&gt;

&lt;p&gt;Let’s start with a look at the typical stakeholders in this process.&lt;/p&gt;

&lt;h2 id=&quot;who-are-the-stakeholders&quot;&gt;Who are the stakeholders?&lt;/h2&gt;

&lt;p&gt;The figure below represents a very high level representation of the process with the interested parties.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/software-cycle-enterprise.webp&quot; alt=&quot;Software development cycle&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Developers&lt;/strong&gt; - These are the software engineers (including the software/product architects, leads, managers, etc.) who work on designing and developing the software in question. This usually includes multiple teams depending on the scope of the work involved. As is the case with large organizations working on software over a few years, the size of the code base is huge and multiple teams work on any single product/feature. So, anything other then simple features or bug fixes can be assumed to involve multiple teams. Anyone from UI/front-end/back-end engineering teams to embedded software engineers (or all of them for large products) fall into this bucket.
    &lt;ul&gt;
      &lt;li&gt;For example, a product such as enterprise firewall can have the core software team for the firewall itself, a team working on the management layer for the firewall (say a security controller), a UI team for the management device, a policy team to maintain the consumer facing policy layer, etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Testing engineers&lt;/strong&gt; - This includes the engineers who take over from the development teams and run more extensive tests (outside of the unit-tests written by the developers). This includes end-to-end product testing, regression tests, automated test suites, functional and feature interaction tests.
    &lt;ul&gt;
      &lt;li&gt;System vs solution tests
        &lt;ul&gt;
          &lt;li&gt;Systems tests are meant to test the product as a whole (think QA/black box testing) and how different applications/software layers work together.&lt;/li&gt;
          &lt;li&gt;Solution tests are meant to test the product/feature in the ecosystem similar to where it is deployed. If the product tested is a firewall, then the solution test team deploys it in an environment close to how it is deployed in customer premises (with the entire management/contol plane, variety of devices for traffic, with enough load/scale, etc).&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DevOps&lt;/strong&gt; - This can mean a lot of things - build automation, test pipeline management, software deployment automation, artifact management, etc. Even GitHub automation for code commit management falls into this.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;UX designers&lt;/strong&gt; - For features which have a management plane, UX designers are also part of the project. This is usually from dedicated UX teams who contribute to multiple products based on requirements and existing functionality.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Product Management&lt;/strong&gt; - This includes the product managers who focus on the technical aspects which need attention based on customer feedback and market needs. They do the market research to decide what features makes most business sense for the company/product in question and combine that with customer feedback for existing products to generate actionable feature requests for the development teams.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Project Management&lt;/strong&gt; - Distinct from product management, this category includes those working to manage projects involving multiple teams (sometimes across different sectors in the company) and taking it to completion. The project managers track the timelines and deliverables, prioritize and schedule tasks to achieve cross-functional development success.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Technical Marketing/Sales&lt;/strong&gt; - This sometimes has overlap with product management based on the company. But typically this includes teams working to take finished products/features to market them to customers, work on technical demonstrations, prepare field trials and to collect specific engineering feedback.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Technical writers&lt;/strong&gt; - This includes teams working on technical documentation for the product/features. They collect information from the development and testing teams and work on documenting it in such a way as to make it easier for others to then use the software.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Software Release Management&lt;/strong&gt; - This includes specialized teams working on managing software release cycles. This may sometimes be folded into DevOps.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Customers&lt;/strong&gt; - This is a term which can mean a lot, but in this case we’re looking at enterprise customers - i.e., large businesses which buy and use software. Examples - for a company like Intel which develops chip-sets, laptop manufacturers can be customers. For companies like Juniper Networks, large enterprises (like Walmart for their IT needs) or ISPs (AT&amp;amp;T, Verizon) can be customers. These customer organizations have specific business needs which are translated into technical requirements which are then converted to finished products to be deployed back in the organizations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;software-development-cycle&quot;&gt;Software development cycle&lt;/h2&gt;

&lt;p&gt;The figure in the previous section has a high level overview of the software lifecycle in terms of the teams involved. It shows the sequence of steps followed to get a product/feature requirement translated into a completed product.&lt;/p&gt;

&lt;p&gt;Let’s look at the ‘development’ phase in a little more detail. There are a few ways a project starts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Engineering driven innovations&lt;/p&gt;

    &lt;p&gt;The Engineering teams (development/testing) recognizes the need for improvement in a product or a new product/feature category altogether and gets buy-in from the other teams to begin development in new software. This can be because the software leads/architects see a new way to do something, or improvements to existing products based on their deep knowledge of existing code bases, etc. However this is done, the push to start a new cycle is internal to the company and customer feedback is collected early in the cycle or at the end once a stable version of the software is available.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Customer driven requirements&lt;/p&gt;

    &lt;p&gt;The customers, depending on their operational needs, request a new feature or product category altogether (say a custom architecture of a chip-set to suit a new form factor, a new way to do user authentication across their internal network, etc.). This is then translated (by either the Sales teams if this is a new customer they are bidding to sign or by the product marketing teams for existing customers looking for new features) to engineering requirements to be taken up for development. This is put in a queue of features to be prioritized for every release and then taken up for development by the engineering teams.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Competitor catch-up&lt;/p&gt;

    &lt;p&gt;This needs to be said - not all companies are at the cutting edge of engineering developments, and sometimes they simply need to catch up to faster, nimbler competitors. Once the competitor comes up with a new architecture for their leading chip-sets (and, say, leading to more processing power or higher speeds), or a feature/product that obviates the need for an existing product category, the need to catch up to them drives the changes.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are several other reasons (such as acquisition of a smaller company and merging it into existing product lines, or security holes exposed by a vulnerability, etc.). But the above three are the more prominent ones.&lt;/p&gt;

&lt;p&gt;Once a need to start something new is seen, the different teams involved in this need to co-ordinate development. Each team may have their own prioritized list of tasks. But when cross-functional requirements are to be taken up, a software architect (titles vary across companies) runs the initial discussions to arrive at specific goals until project management takes over to drive the development. What about the methodology used for development? What we’ve explained so far fits neatly into the classic waterfall model of software development. Can development here be “Agile”?&lt;/p&gt;

&lt;h2 id=&quot;waterfall-or-agile-how-about-a-hybrid&quot;&gt;Waterfall or Agile? How about a hybrid?&lt;/h2&gt;

&lt;p&gt;Again turning to Wikipedia,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The waterfall model is a breakdown of project activities into linear sequential phases, where each phase depends on the deliverables of the previous one and corresponds to a specialization of tasks. The approach is typical for certain areas of engineering design. In software development, it tends to be among the less iterative and flexible approaches, as progress flows in largely one direction (“downwards” like a waterfall) through the phases of conception, initiation, analysis, design, construction, testing, deployment and maintenance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The months long development cycles have traditionally followed this waterfall model. The requirements and scope of development is decided months in advance and then once the development team has completed the features, the actual deployment of code is weeks to months (sometime years later for cautious enterprise customers) later. But this need not rule out the Agile approach.&lt;/p&gt;

&lt;p&gt;Turning to a different source this time &lt;a href=&quot;https://www.atlassian.com/agile&quot;&gt;Atlassian&lt;/a&gt;,&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Agile is an iterative approach to project management and software development that helps teams deliver value to their customers faster and with fewer headaches. Instead of betting everything on a “big bang” launch, an agile team delivers work in small, but consumable, increments. Requirements, plans, and results are evaluated continuously so teams have a natural mechanism for responding to change quickly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This indicates an iterative development process with continuous and frequent feedback loops. In the enterprise development cycles, this can simply mean shorter internal cycles to develop and test code. That way a longer cycle to deploy code to customer premises can be combined with shorter internal cycles to streamline development processes.&lt;/p&gt;

&lt;p&gt;This hybrid approach helps to align long term strategy with shorter and faster cycles especially during cross-functional development. Different internal teams may have different priorities and approaches, but being “agile” and adaptable to change can mean quick realignment when there is a shift in priorities due to external factors.&lt;/p&gt;

&lt;p&gt;Recent shift to working from home is an example. Lots of companies needed to shift priorities. Lack of raw materials, new product areas (or de-prioritized existing products), reduced budgets - all this need not mean that a decision taken months ago ties everyone’s hands. The internal teams can quickly shift strategy with such a hybrid approach.&lt;/p&gt;

&lt;p&gt;As times change, internal processes change at such companies to be more like those at nimbler smaller companies and that changes the development culture for the better. Ignoring such changes are usually done at the company’s peril. Reacting faster to change has become a nessary trait at software companies due to the pace of change of the market. Companies like Microsoft have successfully made this change, at least in some segments of their business.&lt;/p&gt;

&lt;p&gt;Hope this helps provide some insights into operational processes at a certain kind of large companies.&lt;/p&gt;</content><author><name></name></author><category term="blog" /><summary type="html">Entire books can be written about how software is developed in different organizations. Small startups usually operate very differently from large enterprises when it comes to developing, testing, and deploying software. Even among large companies, this changes based on whether it’s a company serving consumers directly or if they serve other businesses. This is to document my experiences working on enterprise software - software that is used by and sold to other businesses - over the last decade. What is enterprise software? Let’s start with the Wikipedia definition of this. Enterprise software is a collection of computer programs that have common business applications, tools for modeling how the entire organization works, and development tools for building applications unique to the organization. The software is intended to solve an enterprise-wide problem, rather than a departmental problem. Enterprise-level software aims to improve the enterprise’s productivity and efficiency by providing business logic support functionality. This involves software for, say, CRM, or large databases used by businesses, or software running on switches and routers in the internet backbone and the network edge, software for payment processing systems, mainframe systems, etc. This is very different from developing an iOS or Android application directly used by consumers or even consumer facing software from large firms such as Uber, Facebook(Meta?) or Netflix. I’m talking about companies like Oracle or Cisco or IBM. There are of course companies that fit in the middle of this spectrum. A prime example can be something like Stripe - which helps businesses of all sizes and shapes do e-commerce. Companies like Google and Amazon fit here as well since they do a mix of enterprise (AWS, Google Cloud, Ads) and consumer facing software (music, email, photos, payments). Among other reasons, here I see the barrier as thin, since the flow of ideas and people from one area to the other happens more freely. The culture and operating model for the business is still different enough from the large-enterprise focused companies such as Intel or Cisco. The software cycles are typically longer (months rather than weeks or days) and updates are released quarterly or (in some cases even annually). This is in contrast with companies like Uber, where software changes more frequently, sometimes daily and the companies pride themselves on this aspect of their culture (Uber Engineering’s Micro Deploy - this is from 2017, but I’d think still relevant). Let’s start with a look at the typical stakeholders in this process. Who are the stakeholders? The figure below represents a very high level representation of the process with the interested parties. Developers - These are the software engineers (including the software/product architects, leads, managers, etc.) who work on designing and developing the software in question. This usually includes multiple teams depending on the scope of the work involved. As is the case with large organizations working on software over a few years, the size of the code base is huge and multiple teams work on any single product/feature. So, anything other then simple features or bug fixes can be assumed to involve multiple teams. Anyone from UI/front-end/back-end engineering teams to embedded software engineers (or all of them for large products) fall into this bucket. For example, a product such as enterprise firewall can have the core software team for the firewall itself, a team working on the management layer for the firewall (say a security controller), a UI team for the management device, a policy team to maintain the consumer facing policy layer, etc. Testing engineers - This includes the engineers who take over from the development teams and run more extensive tests (outside of the unit-tests written by the developers). This includes end-to-end product testing, regression tests, automated test suites, functional and feature interaction tests. System vs solution tests Systems tests are meant to test the product as a whole (think QA/black box testing) and how different applications/software layers work together. Solution tests are meant to test the product/feature in the ecosystem similar to where it is deployed. If the product tested is a firewall, then the solution test team deploys it in an environment close to how it is deployed in customer premises (with the entire management/contol plane, variety of devices for traffic, with enough load/scale, etc). DevOps - This can mean a lot of things - build automation, test pipeline management, software deployment automation, artifact management, etc. Even GitHub automation for code commit management falls into this. UX designers - For features which have a management plane, UX designers are also part of the project. This is usually from dedicated UX teams who contribute to multiple products based on requirements and existing functionality. Product Management - This includes the product managers who focus on the technical aspects which need attention based on customer feedback and market needs. They do the market research to decide what features makes most business sense for the company/product in question and combine that with customer feedback for existing products to generate actionable feature requests for the development teams. Project Management - Distinct from product management, this category includes those working to manage projects involving multiple teams (sometimes across different sectors in the company) and taking it to completion. The project managers track the timelines and deliverables, prioritize and schedule tasks to achieve cross-functional development success. Technical Marketing/Sales - This sometimes has overlap with product management based on the company. But typically this includes teams working to take finished products/features to market them to customers, work on technical demonstrations, prepare field trials and to collect specific engineering feedback. Technical writers - This includes teams working on technical documentation for the product/features. They collect information from the development and testing teams and work on documenting it in such a way as to make it easier for others to then use the software. Software Release Management - This includes specialized teams working on managing software release cycles. This may sometimes be folded into DevOps. Customers - This is a term which can mean a lot, but in this case we’re looking at enterprise customers - i.e., large businesses which buy and use software. Examples - for a company like Intel which develops chip-sets, laptop manufacturers can be customers. For companies like Juniper Networks, large enterprises (like Walmart for their IT needs) or ISPs (AT&amp;amp;T, Verizon) can be customers. These customer organizations have specific business needs which are translated into technical requirements which are then converted to finished products to be deployed back in the organizations. Software development cycle The figure in the previous section has a high level overview of the software lifecycle in terms of the teams involved. It shows the sequence of steps followed to get a product/feature requirement translated into a completed product. Let’s look at the ‘development’ phase in a little more detail. There are a few ways a project starts: Engineering driven innovations The Engineering teams (development/testing) recognizes the need for improvement in a product or a new product/feature category altogether and gets buy-in from the other teams to begin development in new software. This can be because the software leads/architects see a new way to do something, or improvements to existing products based on their deep knowledge of existing code bases, etc. However this is done, the push to start a new cycle is internal to the company and customer feedback is collected early in the cycle or at the end once a stable version of the software is available. Customer driven requirements The customers, depending on their operational needs, request a new feature or product category altogether (say a custom architecture of a chip-set to suit a new form factor, a new way to do user authentication across their internal network, etc.). This is then translated (by either the Sales teams if this is a new customer they are bidding to sign or by the product marketing teams for existing customers looking for new features) to engineering requirements to be taken up for development. This is put in a queue of features to be prioritized for every release and then taken up for development by the engineering teams. Competitor catch-up This needs to be said - not all companies are at the cutting edge of engineering developments, and sometimes they simply need to catch up to faster, nimbler competitors. Once the competitor comes up with a new architecture for their leading chip-sets (and, say, leading to more processing power or higher speeds), or a feature/product that obviates the need for an existing product category, the need to catch up to them drives the changes. There are several other reasons (such as acquisition of a smaller company and merging it into existing product lines, or security holes exposed by a vulnerability, etc.). But the above three are the more prominent ones. Once a need to start something new is seen, the different teams involved in this need to co-ordinate development. Each team may have their own prioritized list of tasks. But when cross-functional requirements are to be taken up, a software architect (titles vary across companies) runs the initial discussions to arrive at specific goals until project management takes over to drive the development. What about the methodology used for development? What we’ve explained so far fits neatly into the classic waterfall model of software development. Can development here be “Agile”? Waterfall or Agile? How about a hybrid? Again turning to Wikipedia, The waterfall model is a breakdown of project activities into linear sequential phases, where each phase depends on the deliverables of the previous one and corresponds to a specialization of tasks. The approach is typical for certain areas of engineering design. In software development, it tends to be among the less iterative and flexible approaches, as progress flows in largely one direction (“downwards” like a waterfall) through the phases of conception, initiation, analysis, design, construction, testing, deployment and maintenance. The months long development cycles have traditionally followed this waterfall model. The requirements and scope of development is decided months in advance and then once the development team has completed the features, the actual deployment of code is weeks to months (sometime years later for cautious enterprise customers) later. But this need not rule out the Agile approach. Turning to a different source this time Atlassian, Agile is an iterative approach to project management and software development that helps teams deliver value to their customers faster and with fewer headaches. Instead of betting everything on a “big bang” launch, an agile team delivers work in small, but consumable, increments. Requirements, plans, and results are evaluated continuously so teams have a natural mechanism for responding to change quickly. This indicates an iterative development process with continuous and frequent feedback loops. In the enterprise development cycles, this can simply mean shorter internal cycles to develop and test code. That way a longer cycle to deploy code to customer premises can be combined with shorter internal cycles to streamline development processes. This hybrid approach helps to align long term strategy with shorter and faster cycles especially during cross-functional development. Different internal teams may have different priorities and approaches, but being “agile” and adaptable to change can mean quick realignment when there is a shift in priorities due to external factors. Recent shift to working from home is an example. Lots of companies needed to shift priorities. Lack of raw materials, new product areas (or de-prioritized existing products), reduced budgets - all this need not mean that a decision taken months ago ties everyone’s hands. The internal teams can quickly shift strategy with such a hybrid approach. As times change, internal processes change at such companies to be more like those at nimbler smaller companies and that changes the development culture for the better. Ignoring such changes are usually done at the company’s peril. Reacting faster to change has become a nessary trait at software companies due to the pace of change of the market. Companies like Microsoft have successfully made this change, at least in some segments of their business. Hope this helps provide some insights into operational processes at a certain kind of large companies.</summary></entry><entry><title type="html">Are Big Tech software engineering interviews optimal?</title><link href="/blog/2022/02/04/big-tech-interviews-optimal.html" rel="alternate" type="text/html" title="Are Big Tech software engineering interviews optimal?" /><published>2022-02-04T11:43:30-08:00</published><updated>2022-02-04T11:43:30-08:00</updated><id>/blog/2022/02/04/big-tech-interviews-optimal</id><content type="html" xml:base="/blog/2022/02/04/big-tech-interviews-optimal.html">&lt;p&gt;First, what do I mean when I say Big Tech companies? Companies whose focus is technology first (narrowing it further, software &amp;amp; tech first), whose revenue stream is primarily dependent on developing and maintaining high quality software. Companies like Google, Facebook, etc. The needs of such companies are usually different from small startups where the focus is on having engineers who can hit the ground running with no time to train them. Here, the focus is on hiring the most competent engineers for the job who can be trained to function effectively across a wide variety of technologies.&lt;/p&gt;

&lt;p&gt;Such companies have mostly zeroed in on an interview process that is along the lines of -&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;One phone interview, to act as a screener — coding and/or behavioral questions to decide on the caliber of the candidate, to see if they can be advanced to more rigorous interviews.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;5–6 rounds of ‘on-site’ (now virtual) interviews — mix of coding, system design (if candidate has experience) and behavioral rounds. This varies with companies with some opting to choose interviewers from the org or even the team where the role is in (mostly old tech companies like IBM, Juniper, etc.). Some opt for a random mix of trained interviewers chosen from across the company and across levels (eg., Google).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is usually followed by a briefing session where feedback is collected and a decision is made. Based on how the interviews go, (and the candidate’s experience in some companies), the level and the salary are decided.&lt;/p&gt;

&lt;h2 id=&quot;phone-screener&quot;&gt;Phone screener&lt;/h2&gt;

&lt;p&gt;This is usually a 45 minute round where the candidate is tested based on their background. For most (up to the level of Staff engineers even), this has primarily been about coding questions. Some choose to add in some behavioral questions. An ideal screener round only is used as a yay or nay filter.&lt;/p&gt;

&lt;p&gt;Unfortunately, some companies have chosen to use this as a screener to see which level the candidate will fit in as well. That would be fine if the screener questions are a good mix of the candidate’s background investigation and coding and design chops, but 45 minutes is too short for this. I’ve heard first hand stores about some interviewers in Big-Tech companies chosing a Leetcode medium/hard style question and using solely that to decide which level the candidate would interview for. If they do badly in this round, they may end up interviewing for a position several levels lower than where they hoped to end up.&lt;/p&gt;

&lt;p&gt;Such things need to be watched out for by the interviewees. They need to be extra careful and diligent in preparing for and answering the questions here, because this has started to play more than just the commonly assumed role of a yay-or-nay round.&lt;/p&gt;

&lt;h2 id=&quot;on-sitevirtual-interviews&quot;&gt;On-site/virtual interviews&lt;/h2&gt;

&lt;p&gt;Once the candidate passes the above round, the next set of interviews are decided. Here is where there is a wide variety of patterns.&lt;/p&gt;

&lt;h3 id=&quot;faang-style-interviews&quot;&gt;FAANG style interviews&lt;/h3&gt;

&lt;p&gt;Some companies decide the pattern for this solely based on the screener round. Interviewees should be careful about talking about this with the recruiter ahead of time.&lt;/p&gt;

&lt;p&gt;Assuming you did the screener well, then this is usually at your level. For any one with a few years’ industry experience, this will result in a good mix of coding, system design and behavioral rounds that test your overall technical chops (with almost nothing about your background/experience). For engineers new to the industry, this may be mostly programming interviews.&lt;/p&gt;

&lt;p&gt;There are variations here, with companies like Amazon adding a bar raiser round whose focus is different from the others — do you just meet the bar or do you raise it if you were to be hired.&lt;/p&gt;

&lt;p&gt;The interviewers are usually trained to follow the company’s patterns and base their decisions on a fixed set of rules, usually after a committee goes over the interview feedback.&lt;/p&gt;

&lt;h3 id=&quot;old-tech-style-interviews&quot;&gt;Old-tech style interviews&lt;/h3&gt;

&lt;p&gt;Now by this I means companies not following the pattern popularized by Google, but instead following the traditional way of interviewing by the team where the open position is.&lt;/p&gt;

&lt;p&gt;Here, the interviews are usually with the peers from the team (or at least the wider org where the role is in). So the interviews focus on the needs of the team (say front-end interviews focus on a mix of coding chops and knowledge of front-end skills, programming language specific questions and technologies). The hiring manager talks to you last and you hear directly from them about how it went. The coding rounds could be less rigorous than with the FAANG style interviews, focusing more on domain knowledge.&lt;/p&gt;

&lt;p&gt;Examples are companies like NVIDIA or any of the old titans (Cisco, Juniper, Intel, etc).&lt;/p&gt;

&lt;p&gt;This is not bad if done right. But usually this results in untrained interviewers running the process, who may not overcome hiring biases.&lt;/p&gt;

&lt;h2 id=&quot;optimal&quot;&gt;Optimal?&lt;/h2&gt;

&lt;p&gt;As Wikipedia defines this —&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Optimal behavior is defined as an action that maximizes the difference between the costs and benefits of that decision.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Do these interviews balance the costs and benefits of hiring or rejecting the candidate?&lt;/p&gt;

&lt;p&gt;Mostly the FAANG style interviews have served to avoid hiring a bad candidate even at the cost of losing good candidates. This has been an acceptable cost of doing business for them. Especially knowing how hard it is to find out a person’s fit for the role in question using a day of interviews, it’s acceptable that false positives are what are to be avoided. But this is hard on the candidates — they need to perform exceptionally well — more than they actually may need to in the actual job they’ll be hired for. By this I mean, they have a short window to convince 5–6 randomly selected peers of their worth, usually in a single day.&lt;/p&gt;

&lt;p&gt;The old tech style interviews have usually the reverse problem. In the absence of trained interviewers, false negatives abound. The team searches for the skills they may need in the near future and if a candidate knows what those are (note: just &lt;em&gt;what&lt;/em&gt; those are. Not having those skills are sometimes still fine for these interviews), they can get through much easier than the FAANG style interviews. This has proved to be an exceedingly bad idea in today’s day and age. Technical output at such companies are based purely on luck — did the gamble pay off by getting a good engineer or did we make an error? Twenty years ago this was fine as a significant proportion of engineers were technically competent. But now, this is less so and interviews need to be more rigorous.&lt;/p&gt;

&lt;p&gt;These are two ends of a spectrum and both are sub-optimal at first glance, but the former has fewer false positives. So a company that needs a higher talent density opts for the former style, while one needing more engineers at any cost may opt for the latter(or through indecisiveness, not decide on anything, thus leaving each team to hire as they see fit, resulting in the latter). There are other styles — with take home exercises or pair programming exercises, etc., but these are rarer.&lt;/p&gt;

&lt;p&gt;There is no easy answer to the question of what the ideal interview looks like. Each company should decide on what it needs to optimize for and structure the interviews in a pattern that doesn’t need to be tweaked for every candidate and interviewer. In any big company, the needed “skills” (like tools or technologies commonly used) vary by a very wide margin. So what they really need to look for are talented engineers who are motivated and can be trained to use any technology or programming language.&lt;/p&gt;

&lt;p&gt;False negatives have very high costs to the team and even the company. Hiring and not firing an engineer (this is true for PMs or any other tech roles too) can lead to poor technical quality, delayed deliverables, reduced morale for the team etc. Most companies have performance plans for engineers with poor ratings and this is a time consuming process for the team.&lt;/p&gt;

&lt;p&gt;While there is a lot of scope for improvement here, I’d still lean towards approving (a little grudgingly) the FAANG style of having trained interviews test the core qualities of the engineer, rather than focus just on their experience or current “technical skills”. So Leetcode away, but also focus also on becoming a well-rounded engineer and these interviews will become easier. Maybe even try a side project or two and do what you love.&lt;/p&gt;</content><author><name></name></author><category term="blog" /><summary type="html">First, what do I mean when I say Big Tech companies? Companies whose focus is technology first (narrowing it further, software &amp;amp; tech first), whose revenue stream is primarily dependent on developing and maintaining high quality software. Companies like Google, Facebook, etc. The needs of such companies are usually different from small startups where the focus is on having engineers who can hit the ground running with no time to train them. Here, the focus is on hiring the most competent engineers for the job who can be trained to function effectively across a wide variety of technologies. Such companies have mostly zeroed in on an interview process that is along the lines of - One phone interview, to act as a screener — coding and/or behavioral questions to decide on the caliber of the candidate, to see if they can be advanced to more rigorous interviews. 5–6 rounds of ‘on-site’ (now virtual) interviews — mix of coding, system design (if candidate has experience) and behavioral rounds. This varies with companies with some opting to choose interviewers from the org or even the team where the role is in (mostly old tech companies like IBM, Juniper, etc.). Some opt for a random mix of trained interviewers chosen from across the company and across levels (eg., Google). This is usually followed by a briefing session where feedback is collected and a decision is made. Based on how the interviews go, (and the candidate’s experience in some companies), the level and the salary are decided. Phone screener This is usually a 45 minute round where the candidate is tested based on their background. For most (up to the level of Staff engineers even), this has primarily been about coding questions. Some choose to add in some behavioral questions. An ideal screener round only is used as a yay or nay filter. Unfortunately, some companies have chosen to use this as a screener to see which level the candidate will fit in as well. That would be fine if the screener questions are a good mix of the candidate’s background investigation and coding and design chops, but 45 minutes is too short for this. I’ve heard first hand stores about some interviewers in Big-Tech companies chosing a Leetcode medium/hard style question and using solely that to decide which level the candidate would interview for. If they do badly in this round, they may end up interviewing for a position several levels lower than where they hoped to end up. Such things need to be watched out for by the interviewees. They need to be extra careful and diligent in preparing for and answering the questions here, because this has started to play more than just the commonly assumed role of a yay-or-nay round. On-site/virtual interviews Once the candidate passes the above round, the next set of interviews are decided. Here is where there is a wide variety of patterns. FAANG style interviews Some companies decide the pattern for this solely based on the screener round. Interviewees should be careful about talking about this with the recruiter ahead of time. Assuming you did the screener well, then this is usually at your level. For any one with a few years’ industry experience, this will result in a good mix of coding, system design and behavioral rounds that test your overall technical chops (with almost nothing about your background/experience). For engineers new to the industry, this may be mostly programming interviews. There are variations here, with companies like Amazon adding a bar raiser round whose focus is different from the others — do you just meet the bar or do you raise it if you were to be hired. The interviewers are usually trained to follow the company’s patterns and base their decisions on a fixed set of rules, usually after a committee goes over the interview feedback. Old-tech style interviews Now by this I means companies not following the pattern popularized by Google, but instead following the traditional way of interviewing by the team where the open position is. Here, the interviews are usually with the peers from the team (or at least the wider org where the role is in). So the interviews focus on the needs of the team (say front-end interviews focus on a mix of coding chops and knowledge of front-end skills, programming language specific questions and technologies). The hiring manager talks to you last and you hear directly from them about how it went. The coding rounds could be less rigorous than with the FAANG style interviews, focusing more on domain knowledge. Examples are companies like NVIDIA or any of the old titans (Cisco, Juniper, Intel, etc). This is not bad if done right. But usually this results in untrained interviewers running the process, who may not overcome hiring biases. Optimal? As Wikipedia defines this — Optimal behavior is defined as an action that maximizes the difference between the costs and benefits of that decision. Do these interviews balance the costs and benefits of hiring or rejecting the candidate? Mostly the FAANG style interviews have served to avoid hiring a bad candidate even at the cost of losing good candidates. This has been an acceptable cost of doing business for them. Especially knowing how hard it is to find out a person’s fit for the role in question using a day of interviews, it’s acceptable that false positives are what are to be avoided. But this is hard on the candidates — they need to perform exceptionally well — more than they actually may need to in the actual job they’ll be hired for. By this I mean, they have a short window to convince 5–6 randomly selected peers of their worth, usually in a single day. The old tech style interviews have usually the reverse problem. In the absence of trained interviewers, false negatives abound. The team searches for the skills they may need in the near future and if a candidate knows what those are (note: just what those are. Not having those skills are sometimes still fine for these interviews), they can get through much easier than the FAANG style interviews. This has proved to be an exceedingly bad idea in today’s day and age. Technical output at such companies are based purely on luck — did the gamble pay off by getting a good engineer or did we make an error? Twenty years ago this was fine as a significant proportion of engineers were technically competent. But now, this is less so and interviews need to be more rigorous. These are two ends of a spectrum and both are sub-optimal at first glance, but the former has fewer false positives. So a company that needs a higher talent density opts for the former style, while one needing more engineers at any cost may opt for the latter(or through indecisiveness, not decide on anything, thus leaving each team to hire as they see fit, resulting in the latter). There are other styles — with take home exercises or pair programming exercises, etc., but these are rarer. There is no easy answer to the question of what the ideal interview looks like. Each company should decide on what it needs to optimize for and structure the interviews in a pattern that doesn’t need to be tweaked for every candidate and interviewer. In any big company, the needed “skills” (like tools or technologies commonly used) vary by a very wide margin. So what they really need to look for are talented engineers who are motivated and can be trained to use any technology or programming language. False negatives have very high costs to the team and even the company. Hiring and not firing an engineer (this is true for PMs or any other tech roles too) can lead to poor technical quality, delayed deliverables, reduced morale for the team etc. Most companies have performance plans for engineers with poor ratings and this is a time consuming process for the team. While there is a lot of scope for improvement here, I’d still lean towards approving (a little grudgingly) the FAANG style of having trained interviews test the core qualities of the engineer, rather than focus just on their experience or current “technical skills”. So Leetcode away, but also focus also on becoming a well-rounded engineer and these interviews will become easier. Maybe even try a side project or two and do what you love.</summary></entry><entry><title type="html">Book review — No Rules Rules: Netflix and the Culture of Reinvention</title><link href="/blog/2022/02/04/book-review-netflix-culture.html" rel="alternate" type="text/html" title="Book review — No Rules Rules: Netflix and the Culture of Reinvention" /><published>2022-02-04T04:01:23-08:00</published><updated>2022-02-04T04:01:23-08:00</updated><id>/blog/2022/02/04/book-review-netflix-culture</id><content type="html" xml:base="/blog/2022/02/04/book-review-netflix-culture.html">&lt;p&gt;This is a good book on Netflix culture and what has made it shine as both a media and an engineering powerhouse over the course of two decades. Here are my key takeaways.&lt;/p&gt;

&lt;h2 id=&quot;talent-density&quot;&gt;Talent density&lt;/h2&gt;

&lt;h3 id=&quot;focus-on-recruiting-and-retaining-talented-people-and-do-not-hesitate-to-let-go-of-those-who-do-not-meet-the-bar&quot;&gt;Focus on recruiting and retaining talented people and do not hesitate to let go of those who do not meet the bar&lt;/h3&gt;

&lt;p&gt;This is something which most people understand intuitively but almost never try and implement themselves. Keeping a work environment that is rich in talent (call it skills/knowledge/aptitude/etc.), makes sure that all employees are able to function at a higher level than if they are mixed with others who do not. This should never be done in judgement of individuals who don’t meet that bar, but with a focus on making the team excel at what they are supposed to do. As the book says, anyone who needs more hand-holding than a more talented employee tends to take up more of the manager’s time and the overall output of the team goes down a notch.&lt;/p&gt;

&lt;p&gt;We all see those engineers who may lack motivation but are talented or vice versa and both combinations are bad for team morale. Pessimism is contagious. Teams would do well to heed this advice.&lt;/p&gt;

&lt;h2 id=&quot;candor&quot;&gt;Candor&lt;/h2&gt;

&lt;h3 id=&quot;provide-and-solicit-honest-feedback-with-good-intentions&quot;&gt;Provide and solicit honest feedback, with good intentions&lt;/h3&gt;

&lt;p&gt;We need to be honest when providing feedback, but        with the right intentions — which is to improve team productivity and ensure company success. We can all be honest and candid and rub off as abrasive and hurtful. But that is not the point here. If the company/team culture is itself centered around honest feedback, everyone improves as a result.&lt;/p&gt;

&lt;p&gt;There will be less resentment at not being able to speak up or be heard as a result. Lack of an ability to provide feedback both to your peers and managers or leads (and sometimes even to your junior colleagues) can be harmful both to the person unable to provide the feedback and to the person unable to receive. The company suffers as a result. I’ve seen first-hand this very problem, where more senior engineers are oblivious to their shortcomings and have brought the entire team culture down a few notches. More talented employees leave the team (sometimes the company) as a result.&lt;/p&gt;

&lt;p&gt;But this should be done right. As the authors point out, employees need to be trained in doing this right and the executives, all the way up to the CEO even, need to be on board. Without that, this level of candor can easily be misused (accidentally or not).&lt;/p&gt;

&lt;h2 id=&quot;remove-processes-and-controls&quot;&gt;Remove processes and controls&lt;/h2&gt;

&lt;h3 id=&quot;no-limits-on-vacation-and-spending-only-rule-is-to-do-whats-right-for-the-company&quot;&gt;No limits on vacation and spending. Only rule is to do what’s right for the company&lt;/h3&gt;

&lt;p&gt;This involves removing controls on how much an employee can spend on travel or business and how much vacation they can take, etc. This clearly comes after the first two. Once you have motivated high performing employees and a culture of candor (where feedback is openly provided when one either overspends or is absent a lot), the employees can now be given more freedom to make decisions. Even then this is tricky to implement and it is a lot of effort from the leadership to model and set context for (as the authors explain in detail). But done right, this can be another morale booster and can help reduce the hoops needed to jump through to do the right thing in a timely manner.&lt;/p&gt;

&lt;h2 id=&quot;pay-top-of-personal-market&quot;&gt;Pay top of personal market&lt;/h2&gt;

&lt;h3 id=&quot;pay-employees-what-they-are-really-worth-not-what-helps-the-company-account-books&quot;&gt;Pay employees what they are really worth. Not what helps the company account books&lt;/h3&gt;

&lt;p&gt;This again should follow the first and second points. Once a company has, as its employees, high performers who are self-motivated and will always do the right thing, pay them well. Not just well, but what they will be worth on the market if they ever were to move to another company. This does involve some effort from the management to keep track of both market conditions and individual performance, but this can help with retention rates. Employees will be less motivated to leave just for more money and can focus their time and effort on the job instead of on how to switch jobs every 2–3 years.&lt;/p&gt;

&lt;p&gt;For any company, this is harder to achieve than the first three. Companies historically have a culture of annual pay hikes in single digit percentage points. They pay well to new employees if needed, but rarely think about matching current employees’ pay to market rates. If the market changes abruptly, companies would rather lose employees to those offering better pay instead of retaining them by raising their pay to meet market conditions. But (assuming the book is a 100% accurate) Netflix’s model works really well to retain talented engineers.&lt;/p&gt;

&lt;h2 id=&quot;more-candor&quot;&gt;More Candor&lt;/h2&gt;

&lt;h3 id=&quot;open-the-books-and-be-honest-about-everything-almost&quot;&gt;Open the books and be honest about everything (almost)&lt;/h3&gt;

&lt;p&gt;With trustworthy employees who always do the right thing and are paid well, be honest with them and trust them. The authors talk about even giving them information that are bound to be illegal if leaked (like financial information before earnings calls). Not just this, but also let them know about difficult things — like if layoffs are coming, or if someone was let go and why, etc. The leaders need to be honest about their decisions with their employees. This way, they are made part of the company rather than just stay as employees without any buy-in.&lt;/p&gt;

&lt;p&gt;The authors do make the concession that there is bound to be someone who takes advantage of this information. Even in such cases, the offending person is let go and the policy continues rather than place more restrictions.&lt;/p&gt;

&lt;h2 id=&quot;relax-even-more-controls&quot;&gt;Relax Even More Controls&lt;/h2&gt;

&lt;h3 id=&quot;with-all-the-above-in-place-give-employees-more-freedom-to-decide-the-companys-future&quot;&gt;With all the above in place, give employees more freedom to decide the company’s future&lt;/h3&gt;

&lt;p&gt;Leave decision making powers with the employees with the most context (informed captain is the term they use). A graphic designer with the most knowledge can decide if their leaders’ decisions are right or wrong based on their working knowledge. They can decide to, say run experiments to prove their ideas and convince their leaders even when (especially when) the leader in question had decided against it.&lt;/p&gt;

&lt;p&gt;Basically if you disagree with a decision, voice it as early as possible with data to go with it if you can. Let employees closest to a process take ownership for their decisions and actions. Give them more freedom and responsibility. Encourage them to validate their ideas with their peers (see candor above). But this can be terrifying for some — to be given so much responsibility can sometimes induce fear. The safety net is gone. But a company which implements this looks for people who thrive in such environments and such a person will enjoy the responsibility while working harder to honor the same.&lt;/p&gt;

&lt;p&gt;But when a failure inevitably happens, focus on the learning and ignore the assignment of blame. Let the employee know that the company supports them (again, the analogy provided is that each employee starts out with a limited number of chips — for bets. As long as they don’t continue repeating the same mistakes, it’s good).&lt;/p&gt;

&lt;h2 id=&quot;how-to-bring-all-of-this-together&quot;&gt;How to bring all of this together&lt;/h2&gt;

&lt;h3 id=&quot;eliminate-most-remaining-controls-lead-by-context-and-let-go-those-who-perform-adequately&quot;&gt;Eliminate most remaining controls, lead by context and let go those who perform adequately&lt;/h3&gt;

&lt;p&gt;Once all of the above are in place, now the attention of the company should turn to keeping the talent density high. The authors recommend the Keeper Test — if an employee were to suggest leaving the company, how hard will his manager (peers too I’d say) will fight to retain them. Based on this thought exercise, if the manager feels the employee won’t be able to add more value to the team and if their performance has become just adequate, give them a good severance package and let them go. Ethics aside, this will ensure the talent density remains high. This can only be done after all the above are in place. Though this may encourage a culture of fear about who can be let go and when, it’s up to the leaders to make sure this doesn’t happen. A culture of candid feedback should ensure this decision is not a surprise to the one being let go.&lt;/p&gt;

&lt;p&gt;Then, remove most (if not all) controls in place. Let the leaders lead by context. The book has several great examples to this and I won’t reiterate them here. The essence is that in a high talent workplace, let the ‘informed captain’ make the right decision. All the leaders need to do is set the right context — instead of dictating what decision to take in every scenario, provide guidance on how to arrive at a decision and let the employee then decide.&lt;/p&gt;

&lt;p&gt;This, again, can only work once the culture is as described in the book. In a more safety oriented company, this may not work — eg., the oil industry, healthcare, or automotive safety need a lot of controls. Relaxing them will be counter productive. For workplaces that need creative decision makers, if all the participants are highly talented, willing to provide and receive feedback, context based leadership can provide more freedom and encourage employees who take ownership and pride in what they do.&lt;/p&gt;

&lt;p&gt;Although the strategies to maintain high talent density may seem harsh, it’s a choice for companies to make. Hopefully this won’t mean companies shouldn’t train new hires and always expect to hire employees who can hit the ground running. That may close the doors on a lot of good candidates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EDIT(late 2022)&lt;/strong&gt; : That said, scaling some of the concepts explained above is always a challenge as the company grows. The challenges with such an approach have started to show during the pandemic. More freedom to bring in more content has not translated into bringing quality content and some top-down decisions seem to have been made regarding these. But the book still remains relevant for companies of a certain size and bend.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This is a great read for anyone in industries similar to anything to what Netflix does. This has definitely made me think about my current workplace and some changes that can be made there - eg., about increasing feedback provided across the teams, etc. Any such book that makes you think is worth reading.&lt;/p&gt;</content><author><name></name></author><category term="blog" /><summary type="html">This is a good book on Netflix culture and what has made it shine as both a media and an engineering powerhouse over the course of two decades. Here are my key takeaways. Talent density Focus on recruiting and retaining talented people and do not hesitate to let go of those who do not meet the bar This is something which most people understand intuitively but almost never try and implement themselves. Keeping a work environment that is rich in talent (call it skills/knowledge/aptitude/etc.), makes sure that all employees are able to function at a higher level than if they are mixed with others who do not. This should never be done in judgement of individuals who don’t meet that bar, but with a focus on making the team excel at what they are supposed to do. As the book says, anyone who needs more hand-holding than a more talented employee tends to take up more of the manager’s time and the overall output of the team goes down a notch. We all see those engineers who may lack motivation but are talented or vice versa and both combinations are bad for team morale. Pessimism is contagious. Teams would do well to heed this advice. Candor Provide and solicit honest feedback, with good intentions We need to be honest when providing feedback, but with the right intentions — which is to improve team productivity and ensure company success. We can all be honest and candid and rub off as abrasive and hurtful. But that is not the point here. If the company/team culture is itself centered around honest feedback, everyone improves as a result. There will be less resentment at not being able to speak up or be heard as a result. Lack of an ability to provide feedback both to your peers and managers or leads (and sometimes even to your junior colleagues) can be harmful both to the person unable to provide the feedback and to the person unable to receive. The company suffers as a result. I’ve seen first-hand this very problem, where more senior engineers are oblivious to their shortcomings and have brought the entire team culture down a few notches. More talented employees leave the team (sometimes the company) as a result. But this should be done right. As the authors point out, employees need to be trained in doing this right and the executives, all the way up to the CEO even, need to be on board. Without that, this level of candor can easily be misused (accidentally or not). Remove processes and controls No limits on vacation and spending. Only rule is to do what’s right for the company This involves removing controls on how much an employee can spend on travel or business and how much vacation they can take, etc. This clearly comes after the first two. Once you have motivated high performing employees and a culture of candor (where feedback is openly provided when one either overspends or is absent a lot), the employees can now be given more freedom to make decisions. Even then this is tricky to implement and it is a lot of effort from the leadership to model and set context for (as the authors explain in detail). But done right, this can be another morale booster and can help reduce the hoops needed to jump through to do the right thing in a timely manner. Pay top of personal market Pay employees what they are really worth. Not what helps the company account books This again should follow the first and second points. Once a company has, as its employees, high performers who are self-motivated and will always do the right thing, pay them well. Not just well, but what they will be worth on the market if they ever were to move to another company. This does involve some effort from the management to keep track of both market conditions and individual performance, but this can help with retention rates. Employees will be less motivated to leave just for more money and can focus their time and effort on the job instead of on how to switch jobs every 2–3 years. For any company, this is harder to achieve than the first three. Companies historically have a culture of annual pay hikes in single digit percentage points. They pay well to new employees if needed, but rarely think about matching current employees’ pay to market rates. If the market changes abruptly, companies would rather lose employees to those offering better pay instead of retaining them by raising their pay to meet market conditions. But (assuming the book is a 100% accurate) Netflix’s model works really well to retain talented engineers. More Candor Open the books and be honest about everything (almost) With trustworthy employees who always do the right thing and are paid well, be honest with them and trust them. The authors talk about even giving them information that are bound to be illegal if leaked (like financial information before earnings calls). Not just this, but also let them know about difficult things — like if layoffs are coming, or if someone was let go and why, etc. The leaders need to be honest about their decisions with their employees. This way, they are made part of the company rather than just stay as employees without any buy-in. The authors do make the concession that there is bound to be someone who takes advantage of this information. Even in such cases, the offending person is let go and the policy continues rather than place more restrictions. Relax Even More Controls With all the above in place, give employees more freedom to decide the company’s future Leave decision making powers with the employees with the most context (informed captain is the term they use). A graphic designer with the most knowledge can decide if their leaders’ decisions are right or wrong based on their working knowledge. They can decide to, say run experiments to prove their ideas and convince their leaders even when (especially when) the leader in question had decided against it. Basically if you disagree with a decision, voice it as early as possible with data to go with it if you can. Let employees closest to a process take ownership for their decisions and actions. Give them more freedom and responsibility. Encourage them to validate their ideas with their peers (see candor above). But this can be terrifying for some — to be given so much responsibility can sometimes induce fear. The safety net is gone. But a company which implements this looks for people who thrive in such environments and such a person will enjoy the responsibility while working harder to honor the same. But when a failure inevitably happens, focus on the learning and ignore the assignment of blame. Let the employee know that the company supports them (again, the analogy provided is that each employee starts out with a limited number of chips — for bets. As long as they don’t continue repeating the same mistakes, it’s good). How to bring all of this together Eliminate most remaining controls, lead by context and let go those who perform adequately Once all of the above are in place, now the attention of the company should turn to keeping the talent density high. The authors recommend the Keeper Test — if an employee were to suggest leaving the company, how hard will his manager (peers too I’d say) will fight to retain them. Based on this thought exercise, if the manager feels the employee won’t be able to add more value to the team and if their performance has become just adequate, give them a good severance package and let them go. Ethics aside, this will ensure the talent density remains high. This can only be done after all the above are in place. Though this may encourage a culture of fear about who can be let go and when, it’s up to the leaders to make sure this doesn’t happen. A culture of candid feedback should ensure this decision is not a surprise to the one being let go. Then, remove most (if not all) controls in place. Let the leaders lead by context. The book has several great examples to this and I won’t reiterate them here. The essence is that in a high talent workplace, let the ‘informed captain’ make the right decision. All the leaders need to do is set the right context — instead of dictating what decision to take in every scenario, provide guidance on how to arrive at a decision and let the employee then decide. This, again, can only work once the culture is as described in the book. In a more safety oriented company, this may not work — eg., the oil industry, healthcare, or automotive safety need a lot of controls. Relaxing them will be counter productive. For workplaces that need creative decision makers, if all the participants are highly talented, willing to provide and receive feedback, context based leadership can provide more freedom and encourage employees who take ownership and pride in what they do. Although the strategies to maintain high talent density may seem harsh, it’s a choice for companies to make. Hopefully this won’t mean companies shouldn’t train new hires and always expect to hire employees who can hit the ground running. That may close the doors on a lot of good candidates. EDIT(late 2022) : That said, scaling some of the concepts explained above is always a challenge as the company grows. The challenges with such an approach have started to show during the pandemic. More freedom to bring in more content has not translated into bringing quality content and some top-down decisions seem to have been made regarding these. But the book still remains relevant for companies of a certain size and bend. Summary This is a great read for anyone in industries similar to anything to what Netflix does. This has definitely made me think about my current workplace and some changes that can be made there - eg., about increasing feedback provided across the teams, etc. Any such book that makes you think is worth reading.</summary></entry><entry><title type="html">Random ID generation in distributed systems</title><link href="/blog/2019/01/29/random-id-generation-distsys.html" rel="alternate" type="text/html" title="Random ID generation in distributed systems" /><published>2019-01-29T08:23:45-08:00</published><updated>2019-01-29T08:23:45-08:00</updated><id>/blog/2019/01/29/random-id-generation-distsys</id><content type="html" xml:base="/blog/2019/01/29/random-id-generation-distsys.html">&lt;p&gt;A problem faced by many distributed systems is how to generate an ID that is unique across all the machines in the system. We discuss some common approaches in this post.&lt;/p&gt;

&lt;p&gt;Some of the requirements can be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Time-sortable — Once the IDs are generated, they may be required to be sortable by time (say to order photos by time).&lt;/li&gt;
  &lt;li&gt;Distributed — While some systems may use a single (or group of) server/system(s) for simplicity, some systems would prefer not to have such an implementation to avoid a single point of failure.&lt;/li&gt;
  &lt;li&gt;Scalable — no matter how many servers are added to the system, this should work with minimal to no changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;db-auto-increment&quot;&gt;DB Auto-increment&lt;/h1&gt;

&lt;p&gt;(Or DB Ticket servers)&lt;/p&gt;

&lt;p&gt;Simple systems using a database can take advantage of the auto-increment feature available in a lot of databases. (For example, MongoDB’s Object ID is 12 bytes long). First, looking at the advantages to this&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Databases are well understood and a lot of engineers can use some database very easily.&lt;/li&gt;
  &lt;li&gt;Will be globally (globally =&amp;gt; system wide) unique.&lt;/li&gt;
  &lt;li&gt;Will be monotonically increasing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There will be disadvantages to this also&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Some businesses may be reluctant to move application logic to a database (what would happen if they move to a different database system?).&lt;/li&gt;
  &lt;li&gt;Must depend on the database provider’s guarantee to be globally unique (There may be some edge cases)&lt;/li&gt;
  &lt;li&gt;Single point of failure (even if the database is replicated in some form of master-master setup like in Flickr’s system). At the very least, this can introduce a bottleneck in the system where the application servers need to query the databases every time they need to generate an ID.&lt;/li&gt;
  &lt;li&gt;More complexity to the system — databases need managing. Also needs messaging, etc. to be implemented for the ID query channel.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;ticket-server&quot;&gt;Ticket Server&lt;/h1&gt;
&lt;p&gt;Ticker server (DB servers follow a similar layout)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ticket-servers.png&quot; alt=&quot;Ticker Server&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is basically an extension/modification of the above DB based ID generation systems. Here, some server(s) function simply to serve unique IDs. Similar advantages and disadvantages as above exist. While, this may be a simple implementation, this will still add to the problem of having to maintain and manage additional servers.&lt;/p&gt;

&lt;p&gt;There are systems like Twitter’s Snowflake service which aim to solve some of the issues mentioned above (like SPOF/bottlenecks, etc), but this may bring in other complexities like having to run ZooKeeper to co-ordinate nodes. This may still work in systems where ZooKeeper is already up and running and there is a willingness to maintain it.
UUID&lt;/p&gt;

&lt;p&gt;There are several ways to generate UUIDs. A standard way is to use the logic presented in the RFC. This uses a combination of timestamp/random-number + node ID (MAC address usually) and other information. But, this is usually 128 bits (this may be subjective, but some systems prefer a 64 bit ID).&lt;/p&gt;

&lt;p&gt;Also, depending on the logic used, it may not be time-sortable. But, this is almost always guaranteed to be globally unique. So for systems where the above mentioned disadvantages are not an issue, then using UUIDs is a very good idea.
Custom solutions&lt;/p&gt;

&lt;p&gt;While all the above solutions are perfectly valid under the right circumstances, there are other custom solutions which aim to provide a completely distributed solution with as few moving pieces as possible.&lt;/p&gt;

&lt;p&gt;An example is that used by Instagram to generate a 64 bit ID.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;41 bits for time in milliseconds (gives us 41 years of IDs with a custom epoch)&lt;/li&gt;
  &lt;li&gt;13 bits that represent the logical shard ID&lt;/li&gt;
  &lt;li&gt;10 bits that represent an auto-incrementing sequence, modulus 1024. This means we can generate 1024 IDs, per shard, per millisecond&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another example is Boundary Flake. As described by their github page:&lt;/p&gt;

&lt;p&gt;Flake ids are 128-bits wide described here from most significant to least significant bits.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;64-bit timestamp — milliseconds since the epoch (Jan 1 1970)&lt;/li&gt;
  &lt;li&gt;48-bit worker id — MAC address from a configurable device&lt;/li&gt;
  &lt;li&gt;16-bit sequence # — usually 0, incremented when more than one id is requested in the same millisecond and reset to 0 when the clock ticks forward&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Such implementations have the advantage of being time-sortable, distributed (each note can generate its own ID independently as long as configured correctly) and simple to use. Some care has to be taken to understand this (especially the case when a local clock is used and it is rolled back). But, if done right, this can scale well and little to no configutation/change is needed when new servers are added to the system.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://instagram-engineering.com/sharding-ids-at-instagram-1cf5a71e5a5c&quot;&gt;Instagram’s ID generation logic&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;https://www.slideshare.net/davegardnerisme/unique-id-generation-in-distributed-systems&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mongodb.com/blog/post/generating-globally-unique-identifiers-for-use-with-mongodb&quot;&gt;MongoDB’s Object ID&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc4122&quot;&gt;UUID IETF RFC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="blog" /><category term="distributed-systems" /><summary type="html">A problem faced by many distributed systems is how to generate an ID that is unique across all the machines in the system. We discuss some common approaches in this post.</summary></entry><entry><title type="html">Introduction to Dynamic Programming</title><link href="/blog/2017/04/17/intro-to-dynamic-programming.html" rel="alternate" type="text/html" title="Introduction to Dynamic Programming" /><published>2017-04-17T11:29:57-07:00</published><updated>2017-04-17T11:29:57-07:00</updated><id>/blog/2017/04/17/intro-to-dynamic-programming</id><content type="html" xml:base="/blog/2017/04/17/intro-to-dynamic-programming.html">&lt;p&gt;Not many who have left school consciously think about Dynamic Programming on a day to day basis. Most only to come to it when preparing for an interview. However, this is a useful algorithmic technique and it helps to understand it. This post should provide an introduction to Dynamic Programming and after reading this, it should be possible to attempt the problems provided at the end with ease.&lt;/p&gt;

&lt;p&gt;Dynamic programming (or dynamic optimization) is a method for solving problems which can split into multiple simpler, smaller and overlapping (or repeating) sub-problems. Since the sub-problems are overlapping (meaning same sub-problems get repeated several times), it will be possible to save the solutions to them in a memory-based data structure. This helps reduce computation time at the expense of (hopefully moderate) storage space. Each of the sub-problem solutions is indexed in some way, typically based on the values of its input parameters, so as to facilitate its lookup. The technique of storing solutions to sub-problems instead of recomputing them is called Memoization.&lt;/p&gt;

&lt;p&gt;The two main requirements for a problem to be solved this way are Optimal Substructure and Overlapping sub-problems.&lt;/p&gt;

&lt;h1 id=&quot;optimal-substructure&quot;&gt;Optimal Substructure&lt;/h1&gt;

&lt;p&gt;This simply means that the optimal solution to the actual problem is a combination of the optimal solutions to its sub-problems. This will become clearer as we look at Examples, but a quick look at Dijkstra’s algorithm for single-source shortest path computation will help us understand this. In that, we repeatedly compute the shortest so-far from a source, by storing the vertices in a priority queue, weighted by their distance from the source. So the shortest distance from a node s to a node n will be&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d(s,n) = d(s,m) + e(m,n)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;where e(m,n) is the length of the edge from m to n. In this case, the optimal substructure is that the shortest distance from s to n is the shortest distance from s to m + the edge from m to n. Recursion plays a big role in visualizing these problems and is usually the first approach to solving such problems.&lt;/p&gt;

&lt;h1 id=&quot;overlapping-sub-problems&quot;&gt;Overlapping Sub-Problems&lt;/h1&gt;

&lt;p&gt;This requirement needs the problem to be split into a small space of sub-problems which would be solved over and over again in the process of getting to the solution of the problem — ie., we should be solving the same problems over and over again instead of solving newer and newer sub-problems. An example of non-overlapping subproblems is the merge-sort (and quicksort). Merge sort falls into the Divide and Conquer category, since we solve distinct subproblems and repeatedly merge the results.&lt;/p&gt;

&lt;p&gt;Example: To calculate Fibonacci numbers, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fib(4) = fib(3) + fib(2)&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fib(3) = fib(2) + fib(1)&lt;/code&gt; and so on. For each higher number in the series, if we solve this recursively, we will end up calculating the same lower-order problems over and over again. Such is a requirement for the problem to fall into this category.&lt;/p&gt;

&lt;h1 id=&quot;memoization&quot;&gt;Memoization&lt;/h1&gt;

&lt;p&gt;If the above two requirements are met, then we can save or cache the results to be looked up later when we are solving the same sub-problems again and again. This will result in a huge drop in computation times at the expence of a small increase in memory space consumption. For example, in the fibonacci series problem, when calculating fib(4), we need fib(3) and fib(2). But, fib(3) = fib(2) + fib(1). So fib(2) could be calculated twice here. If we cache fib(2) the first time it is calculated and then re-use it, this optimizes the computation. This is memoization.&lt;/p&gt;

&lt;h1 id=&quot;solving-theproblem&quot;&gt;Solving the Problem&lt;/h1&gt;

&lt;p&gt;There are two approaches to solving such problems — the top-down approach and the bottom-up approach.&lt;/p&gt;

&lt;h2 id=&quot;top-down-approach&quot;&gt;Top-down approach&lt;/h2&gt;

&lt;p&gt;This directly results from the recursion &amp;amp; memoization principles. We start from the problem and recursively solve the sub-problems while caching the results. Example: for fibonacci series, to get fib(50) - the 50th number in the series, we will calculate fib(49) and fib(48) and for fib(49), we’ll calculate fib(48) and fib(47) and so on recursively. If we think about this, then we can see that the first actual computation per se will be to compute the edge cases fib(0) and fib(1) and then fib(2) and so on until we get to fib(49) and fib(48). We recursively compute the smaller problems optimally and cache the results. This directly leads to the next approach.&lt;/p&gt;

&lt;h2 id=&quot;bottom-up-approach&quot;&gt;Bottom-up approach&lt;/h2&gt;

&lt;p&gt;In this approach, we start from a base case and iteratively build up to the solution we are looking for. Instead of recursively solving the problem, we formulate the sub problems, and solve them first before using them to build a solution for the problem itself. It’s usually a table that stores the data needed with the indices somehow referring to the parameters of the problem itself. Taking the same example of Fibonacci numbers, if we need fib(50), we start at fib(0) and fib(1) as our base cases, and iteratively build the solutions to bigger problems from them to get to fib(50).&lt;/p&gt;

&lt;h1 id=&quot;examples&quot;&gt;Examples&lt;/h1&gt;

&lt;p&gt;The key to solving these problems is identifying the recurrence correctly and what the table actually represents. Once that is done, formulating the table is trivial.&lt;/p&gt;

&lt;h2 id=&quot;fibonacci-numbers&quot;&gt;Fibonacci numbers&lt;/h2&gt;

&lt;p&gt;A good example is calculating Fibonacci numbers. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fib(n) = fib(n-1) + fib(n-2)&lt;/code&gt;. A recursive approach to solving this would be:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can see the calls to sub-problems will quickly explode computing the same problems over and over again, especially the smaller sub-problems — fib(2), fib(1), fib(0).&lt;/p&gt;

&lt;p&gt;To avoid this, we could cache the solution.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
   &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We now store the solution and then use it if needed without having to recompute the sub-problems again. This leads to out next optimization where we start from the bottom-up.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cases&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;coin-changeproblems&quot;&gt;Coin change problems&lt;/h2&gt;

&lt;p&gt;There are two coin change problems. The two seem similar, but are subtly different.&lt;/p&gt;

&lt;h3 id=&quot;given-an-amount-and-a-list-of-coin-values-each-with-infinite-coins-find-out-in-how-many-ways-we-can-make-change-for-theamount&quot;&gt;Given an amount and a list of coin values (each with infinite coins), find out in how many ways we can make change for the amount.&lt;/h3&gt;

&lt;p&gt;When we have n coins, we need to count the number of ways we can make change with all combination of coins. Say we have [1,2,5], we need to find out in how many ways we make change with [1], [2], [5] [1,2], [1,5], [2,5], [1,2,5]. But counting this way is not efficient. So we look at this problem another way. Each time we either use a coin or we don’t and then we count the number of ways and then we sum them up. ie.,&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fn(Amount, coins[1...n]) = fn(Amount - coin[n], coins[1...n]] + fn(Amount, coins[1...n-1])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This way, we get all combination of coins. Not intuitive right away, but makes sense if we think about it. This leads to the following solution.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The top-down approach will be trivial. We simply need to cache the solution for [amount][len(coins))]. The bottom up approach is more interesting.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([][]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;             
	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cached&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optimal&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;problem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;given-an-amount-and-a-list-of-coin-values-each-with-infinite-coins-find-out-the-minimum-number-of-coins-with-which-we-can-make-change-for-theamount&quot;&gt;Given an amount and a list of coin values (each with infinite coins), find out the minimum number of coins with which we can make change for the amount.&lt;/h3&gt;

&lt;p&gt;This problem can’t be solved by looking at it like we did for the previous problem. We don’t need all combinations of change-making. We only need one — the minimum #coins that can make the change. The subproblem here is that at each point, we use the best coin and then try and find the minimum number of coins required to change the remaining amount with ALL coins. This means we can’t take the approach as in the previous variety, where we can use any coin.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;changed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;there&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recursion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;here&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;represented&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;needed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;minCoins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minCoins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])}&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varies&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The simple recursion approach will work by just calling the above. The top-down approach will work by caching the results. Caching will work, since the optimal sub-problem will always have the most optimal solution. In the earlier version, we cached against both the amount and the number of coins used. There we needed that since we were looking at all combinations. Now, we only calculate the minimum #coins, so we need to cache against only that.&lt;/p&gt;

&lt;p&gt;Here is the bottom-up approach. Here we start by finding the minimum #coins needed to change 1, 2, … so on until we hit V. At each step, we calculate the minimum for V by using Solution(V-coin[i]). This is very similar to how we arrive at the solution for Dijkstra’s single source shortest path. There, to get to a node M, we find the shortest path to some N and then add the edge from N to M. This is very similar.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coinChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;seen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4111111111&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;             
	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coin&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
        &lt;span class=&quot;n&quot;&gt;seen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4111111111&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;knapsack-problem&quot;&gt;Knapsack problem&lt;/h2&gt;

&lt;p&gt;Given weights W[0…n-1] and the value of the weights V[0…n-1], put the weights in a bag/knapsack of capacity W, so that the value is maximized.&lt;/p&gt;

&lt;p&gt;In this problem, we have one item of each weight and hence the subproblems will be when we either use an item or we don’t. If m[v,w] is the maximum value attained with items [1…v] for a capacity w, then&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/no value for empty Value array
m[v,0] = 0 /&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The basic recurrence will keep evaluating the sub-problems and hence we will cache the results. The bottom-up approach immediately follows from this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fillKnapsack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;W&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;W&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([][]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;continue&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;maxValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Understanding this problem can help solve a great many problems. One of them is the N-sum problem where given an array of integers, we need to know if a subset of them can sum up to N.&lt;/p&gt;

&lt;h2 id=&quot;edit-distance&quot;&gt;Edit Distance&lt;/h2&gt;

&lt;p&gt;Given two character sequences, we need to find the edit-distance between them. Edit distance is used to measure the difference between the two sequences — ie., the number of operations required to transform one sequence into the other.&lt;/p&gt;

&lt;p&gt;Now the operations(addition of a character, deletion of a character or the replacement of a character) can be weighed. For the sake of simplicity, our example here doesn’t do that and assumes a cost of 1 for every operation.&lt;/p&gt;

&lt;p&gt;Levenshtein distance is a popular measure of edit distance and this is a simplified form of it. The general recursive implementation will use the following logic. If D(i,j) is used to indicate the edit distance between two sequences I[1…i] and J[1…j], then,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Edit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itself&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;J&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;J&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;sr&quot;&gt;//inse&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rtion&lt;/span&gt;
                  &lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deletion&lt;/span&gt;
                  &lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/substitution&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Implementing this using recursion will mean re-computing the same subproblems repeatedly. The optimization would be the following. This can be optimized further by saving only two rows at any time, but that is not done here for simplicity.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4111111111&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minDistance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;J&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Dij&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;represents&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Do&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;D0j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Di0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;since&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([][]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;J&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;J&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;J&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="blog" /><summary type="html">Not many who have left school consciously think about Dynamic Programming on a day to day basis. Most only to come to it when preparing for an interview. However, this is a useful algorithmic technique and it helps to understand it. This post should provide an introduction to Dynamic Programming and after reading this, it should be possible to attempt the problems provided at the end with ease. Dynamic programming (or dynamic optimization) is a method for solving problems which can split into multiple simpler, smaller and overlapping (or repeating) sub-problems. Since the sub-problems are overlapping (meaning same sub-problems get repeated several times), it will be possible to save the solutions to them in a memory-based data structure. This helps reduce computation time at the expense of (hopefully moderate) storage space. Each of the sub-problem solutions is indexed in some way, typically based on the values of its input parameters, so as to facilitate its lookup. The technique of storing solutions to sub-problems instead of recomputing them is called Memoization. The two main requirements for a problem to be solved this way are Optimal Substructure and Overlapping sub-problems. Optimal Substructure This simply means that the optimal solution to the actual problem is a combination of the optimal solutions to its sub-problems. This will become clearer as we look at Examples, but a quick look at Dijkstra’s algorithm for single-source shortest path computation will help us understand this. In that, we repeatedly compute the shortest so-far from a source, by storing the vertices in a priority queue, weighted by their distance from the source. So the shortest distance from a node s to a node n will be d(s,n) = d(s,m) + e(m,n) where e(m,n) is the length of the edge from m to n. In this case, the optimal substructure is that the shortest distance from s to n is the shortest distance from s to m + the edge from m to n. Recursion plays a big role in visualizing these problems and is usually the first approach to solving such problems. Overlapping Sub-Problems This requirement needs the problem to be split into a small space of sub-problems which would be solved over and over again in the process of getting to the solution of the problem — ie., we should be solving the same problems over and over again instead of solving newer and newer sub-problems. An example of non-overlapping subproblems is the merge-sort (and quicksort). Merge sort falls into the Divide and Conquer category, since we solve distinct subproblems and repeatedly merge the results. Example: To calculate Fibonacci numbers, fib(4) = fib(3) + fib(2) and fib(3) = fib(2) + fib(1) and so on. For each higher number in the series, if we solve this recursively, we will end up calculating the same lower-order problems over and over again. Such is a requirement for the problem to fall into this category. Memoization If the above two requirements are met, then we can save or cache the results to be looked up later when we are solving the same sub-problems again and again. This will result in a huge drop in computation times at the expence of a small increase in memory space consumption. For example, in the fibonacci series problem, when calculating fib(4), we need fib(3) and fib(2). But, fib(3) = fib(2) + fib(1). So fib(2) could be calculated twice here. If we cache fib(2) the first time it is calculated and then re-use it, this optimizes the computation. This is memoization. Solving the Problem There are two approaches to solving such problems — the top-down approach and the bottom-up approach. Top-down approach This directly results from the recursion &amp;amp; memoization principles. We start from the problem and recursively solve the sub-problems while caching the results. Example: for fibonacci series, to get fib(50) - the 50th number in the series, we will calculate fib(49) and fib(48) and for fib(49), we’ll calculate fib(48) and fib(47) and so on recursively. If we think about this, then we can see that the first actual computation per se will be to compute the edge cases fib(0) and fib(1) and then fib(2) and so on until we get to fib(49) and fib(48). We recursively compute the smaller problems optimally and cache the results. This directly leads to the next approach. Bottom-up approach In this approach, we start from a base case and iteratively build up to the solution we are looking for. Instead of recursively solving the problem, we formulate the sub problems, and solve them first before using them to build a solution for the problem itself. It’s usually a table that stores the data needed with the indices somehow referring to the parameters of the problem itself. Taking the same example of Fibonacci numbers, if we need fib(50), we start at fib(0) and fib(1) as our base cases, and iteratively build the solutions to bigger problems from them to get to fib(50). Examples The key to solving these problems is identifying the recurrence correctly and what the table actually represents. Once that is done, formulating the table is trivial. Fibonacci numbers A good example is calculating Fibonacci numbers. fib(n) = fib(n-1) + fib(n-2). A recursive approach to solving this would be: func fibonacci(num int) int { if num == 0 || num == 1 { return 1 } return fibonacci(num - 1) + fibonacci(num - 2) } We can see the calls to sub-problems will quickly explode computing the same problems over and over again, especially the smaller sub-problems — fib(2), fib(1), fib(0). To avoid this, we could cache the solution. func fibonacci(num int, cache map[int]int) int { if num == 0 || num == 1 { // base case return num } result := 0 if result, ok := cache[num]; ok { return result } result = fibonacci(num - 1, cache) + fibonacci(num - 2, cache) cache[num] = result return result } We now store the solution and then use it if needed without having to recompute the sub-problems again. This leads to out next optimization where we start from the bottom-up. func fibonacci(num int) int { // base cases num1 := 0 num2 := 1 fib := 0 for i := 2; i &amp;lt;= num; i++ { fib = num1 + num2 num1 = num2 num2 = fib } return fib } Coin change problems There are two coin change problems. The two seem similar, but are subtly different. Given an amount and a list of coin values (each with infinite coins), find out in how many ways we can make change for the amount. When we have n coins, we need to count the number of ways we can make change with all combination of coins. Say we have [1,2,5], we need to find out in how many ways we make change with [1], [2], [5] [1,2], [1,5], [2,5], [1,2,5]. But counting this way is not efficient. So we look at this problem another way. Each time we either use a coin or we don’t and then we count the number of ways and then we sum them up. ie., fn(Amount, coins[1...n]) = fn(Amount - coin[n], coins[1...n]] + fn(Amount, coins[1...n-1]) This way, we get all combination of coins. Not intuitive right away, but makes sense if we think about it. This leads to the following solution. func change(amount int, coins []int) int { if amount &amp;lt; 0 { return 0 } if amount == 0 { return 1 } if len(coins) == 0 { return 0 } length := len(coins) return change(amount, coins[:length-1]) + change(amount - coins[length-1], coins) } The top-down approach will be trivial. We simply need to cache the solution for [amount][len(coins))]. The bottom up approach is more interesting. func change(amount int, coins []int) int { cache := make([][]int, amount+1) for i := 0; i &amp;lt;= amount; i++ { cache[i] = make([]int, len(coins) + 1) } for i := 0; i &amp;lt;= len(coins); i++ { cache[0][i] = 1 } for i := 1; i &amp;lt;= len(coins); i++ { for j := 1; j &amp;lt;= amount; j++ { if j - coins[i-1] &amp;gt;= 0 { //cached optimal sub-problem solution cache[j][i] = cache[j - coins[i-1]][i] } cache[j][i] = cache[j][i] + cache[j][i-1] } } return cache[amount][len(coins)] } Given an amount and a list of coin values (each with infinite coins), find out the minimum number of coins with which we can make change for the amount. This problem can’t be solved by looking at it like we did for the previous problem. We don’t need all combinations of change-making. We only need one — the minimum #coins that can make the change. The subproblem here is that at each point, we use the best coin and then try and find the minimum number of coins required to change the remaining amount with ALL coins. This means we can’t take the approach as in the previous variety, where we can use any coin. If V is the amount to be changed, and there are n coins, the recursion here can be represented by If V == 0, 0 coins are needed. If V &amp;gt; 0 { minCoins(coins[0...n-1], V) = min {1 + minCoins(coins[0...n-1], V - coins[i])} where V &amp;gt; coins[i] &amp;amp;&amp;amp; i varies from 0...m-1. } The simple recursion approach will work by just calling the above. The top-down approach will work by caching the results. Caching will work, since the optimal sub-problem will always have the most optimal solution. In the earlier version, we cached against both the amount and the number of coins used. There we needed that since we were looking at all combinations. Now, we only calculate the minimum #coins, so we need to cache against only that. Here is the bottom-up approach. Here we start by finding the minimum #coins needed to change 1, 2, … so on until we hit V. At each step, we calculate the minimum for V by using Solution(V-coin[i]). This is very similar to how we arrive at the solution for Dijkstra’s single source shortest path. There, to get to a node M, we find the shortest path to some N and then add the edge from N to M. This is very similar. func coinChange(coins []int, amount int) int { if amount &amp;lt;= 0 { return 0 } seen := make([]int, amount + 1) for i := 1; i &amp;lt;= amount; i++ { min := 4111111111 for _, coin := range coins { res := -1 if i &amp;gt;= coin { res = seen[i-coin] + 1 if res &amp;lt; min { min = res } } } seen[i] = min } if seen[amount] == 4111111111 { return -1 } return seen[amount] } Knapsack problem Given weights W[0…n-1] and the value of the weights V[0…n-1], put the weights in a bag/knapsack of capacity W, so that the value is maximized. In this problem, we have one item of each weight and hence the subproblems will be when we either use an item or we don’t. If m[v,w] is the maximum value attained with items [1…v] for a capacity w, then m[0,w] = 0 //no value for empty Value array m[v,0] = 0 //no value for capacity=0 m[v,w] = max(m[v-1,w], m[v-1, w-W[v]] + V[v]) if w &amp;gt; V[v] = m[v-1,w] if w &amp;lt; V[v] The basic recurrence will keep evaluating the sub-problems and hence we will cache the results. The bottom-up approach immediately follows from this. func fillKnapsack(weights, values []int, capacity int) (maxValue int) { W := len(weights) V := len(Values) if W == 0 || V == 0 { return 0 } cache := make([][]int, V + 1) for i, _ := range cache { cache[i] = make([]int, capacity + 1) } for i := 0; i &amp;lt;= V; i++ { for j := 0; j &amp;lt;= capacity; j++ { if i == 0 || j == 0 { continue } if W[i-1] &amp;lt;= capacity { cache[i][j] = cache[i-1][j] } else { x := cache[i-1][j] y := cache[i-1][j-W[i-1]] + V[i-1] if x &amp;gt; y { cache[i][j] = x } else { cache[i][j] = y } } } } maxValue = cache[V][capacity] } Understanding this problem can help solve a great many problems. One of them is the N-sum problem where given an array of integers, we need to know if a subset of them can sum up to N. Edit Distance Given two character sequences, we need to find the edit-distance between them. Edit distance is used to measure the difference between the two sequences — ie., the number of operations required to transform one sequence into the other. Now the operations(addition of a character, deletion of a character or the replacement of a character) can be weighed. For the sake of simplicity, our example here doesn’t do that and assumes a cost of 1 for every operation. Levenshtein distance is a popular measure of edit distance and this is a simplified form of it. The general recursive implementation will use the following logic. If D(i,j) is used to indicate the edit distance between two sequences I[1…i] and J[1…j], then, //Edit distance for sequence and empty sequence is the length of the sequence itself. D(i,0) = i for 1 &amp;lt;= i &amp;lt;= len(I) D(0,j) = j for i &amp;lt;= j &amp;lt;= len(J) if I[i] == J[j], D(i,j) = D(i-1,j-1) else D(i,j) = min{D(i,j-1) + 1, //insertion D(i-1,j) + 1, //deletion D(i-1, j-1) + 1}//substitution Implementing this using recursion will mean re-computing the same subproblems repeatedly. The optimization would be the following. This can be optimized further by saving only two rows at any time, but that is not done here for simplicity. func min(A ...int) int { min := 4111111111 for _, a := range A { if min &amp;gt; a { min = a } } return min } func minDistance(word1 string, word2 string) int { I := len(word1) J := len(word2) //Dij represents the edit distance between word1[0...i-1] and word2[0...j-1]. //Do D0j = j, Di0 = i, since the edit distance between word[0...n-1] and an empty string is n+1 D := make([][]int, I+1) for i, _ := range D { D[i] = make([]int, J+1) } for i := range D { D[i][0] = i } for j := range D[0] { D[0][j] = j } for i := 1; i &amp;lt;= I; i++ { for j := 1; j &amp;lt;= J; j++ { if word1[i-1] == word2[j-1] { D[i][j] = D[i-1][j-1] } else { D[i][j] = min(D[i][j-1] + 1, D[i-1][j] + 1, 1 + D[i-1][j-1]) } } } return D[I][J] }</summary></entry><entry><title type="html">Introduction to Load Balancing</title><link href="/blog/2017/04/12/intro-to-load-balancing.html" rel="alternate" type="text/html" title="Introduction to Load Balancing" /><published>2017-04-12T10:11:03-07:00</published><updated>2017-04-12T10:11:03-07:00</updated><id>/blog/2017/04/12/intro-to-load-balancing</id><content type="html" xml:base="/blog/2017/04/12/intro-to-load-balancing.html">&lt;p&gt;Load balancing at its simplest is defined as distributing load across a group of servers, so they appear to the clients/users as one big server. Load balancing does more than simply distribute load. It helps with redundancy. It helps with scaling the service provided, without the users having to know about it. And more. I’ll attempt to capture some of it here. This can serve as an overview to load balancing.&lt;/p&gt;

&lt;p&gt;First, some definitions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scaling&lt;/strong&gt;. This is more important now than ever considering the size of the internet. This refers to the ability to increase/decrease the capability to handle load (by processing power and other resources) according to demand, without any disruption of the service provided.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redundancy/High-Availability&lt;/strong&gt;. This refers to having more resources to take over in case of failures, to provide seamless service to the users. It can be provided by adding servers that wait on the sidelines to take over when needed. Or, it can be done by designing a stateless system where there are multiple servers running, and one can simply take over from another in case of failure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt;. The entity which requests a resource/service.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;. The entity which provides the resource/service.&lt;/p&gt;

&lt;p&gt;People often wonder what makes a site like Facebook tick. Why is it hard to design a site like that? Anyone with enough web-development chops can put together a website. Why can’t we?&lt;/p&gt;

&lt;p&gt;What makes it difficult is the ability to scale to millions, why billions, of users, while providing uninterrupted service under any type of load. An analogy is that anyone can make a dozen cookies, and make them taste better than the ones bought at a store. But can they make thousands of them at a time? Millions of them? That then brings into the question of how to source the ingredients, how to make the dough for such numbers of them, how to bake them all, and how to store and deliver them. That is what makes the problem interesting. Sites like Facebook are like that. While anyone can create the next great social networking site, handling the sheer scale of the internet is what makes a site tick or fail and crumble like a thousand others.&lt;/p&gt;

&lt;p&gt;Not long ago, creating a website meant buying servers and hosting the website on them. But now, tools like AWS, Google Cloud, etc make such an effort unnecessary. But it is still important to understand how to design a scalable system.&lt;/p&gt;

&lt;p&gt;Anyone wanting to create a website can buy a domain and a few servers and put together a website with a system that can then be used. But, when it starts to become popular and gets more traffic, it will need better and more powerful servers to handle the load. Replacing the old ones would mean downtime and more expense every time it came to replacing them. But, if the servers are designed to be run in parallel, we can simply place another server in front of them to distribute the traffic across the servers now running in parallel. We can increase resources by simply adding more servers to the pool now, without having to bring down or replace the entire system. This new server in front then becomes the load balancer.&lt;/p&gt;

&lt;p&gt;This changes the question now to – how to distribute the load across the servers? First let’s see what types of load balancing are out there.&lt;/p&gt;

&lt;h1 id=&quot;types-of-load-balancing&quot;&gt;TYPES OF LOAD BALANCING&lt;/h1&gt;
&lt;h2 id=&quot;round-robin-dns&quot;&gt;ROUND ROBIN DNS&lt;/h2&gt;
&lt;p&gt;Load Balancing comes in several types. The simples of them is Round Robin DNS. This is simply using the fact whenever a client needs to access a website, it needs to resolve the domain name (such as http://www.google.com) into reachable IP addresses. In simple terms, the DNS server which will return the IP addresses can decide in which order to return them in. For Client A, it can return 1, 2, 3 and for Client B, it can return 2, 3, 1. The clients can choose the first address on the list and hence this can function as a simple load balancer.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vg&quot;&gt;$nslookup&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wordpress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;com&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.3&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.3&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#53&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Non&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authoritative&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;answer:
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wordpress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;com&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canonical&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wordpress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wordpress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;com&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;78.13&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wordpress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;com&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;78.12&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This can also be leveraged to implement client-side load balancing where the client can try each IP in turn in case of failures. This provides some level of redundancy too.&lt;/p&gt;

&lt;p&gt;This scheme, however simple, has problems. What happens when one of the servers on the list is down and the DNS administrators for the domain fail to update it in time? Also, how do we account for DNS caching behavior? Despite such problems, this is popular for its simplicity and can, even now, help in geographically distributing the load across data centers.&lt;/p&gt;

&lt;p&gt;Inside a data center, however, other schemes must be used.&lt;/p&gt;

&lt;h2 id=&quot;l3l4-load-balancing&quot;&gt;L3/L4 LOAD BALANCING&lt;/h2&gt;
&lt;p&gt;This is server side load balancing done at the network and transport layers respectively of the networking stack.&lt;/p&gt;

&lt;p&gt;L3 load balancing is when routing decisions are taken based on the packet’s source and destination IP addresses. L4 Load balancing is when the source and destination IP address and port information is used to route traffic across server instances. For example, HTTP(80) traffic and HTTPS(443) traffic can be redirected differently from, say SIP traffic on port 5060.&lt;/p&gt;

&lt;p&gt;Servers can be chosen in different ways. Round robin is a simple way here. Or, the IP+Port information can be hashed to decide the server. This can at least ensure some level of predictability in allocating clients to servers. More on this later.&lt;/p&gt;

&lt;p&gt;Now the load balancer can act like a proxy, where it terminates TCP connection and establishes one with the server chosen or do NAT (Network Address Translation) where it simply forwards requests to the chosen server and receive the responses and sends them back to the client. In these cases, the IP address of the packet is changed accordingly. Or it can run in a mode called Direct Server Return (DSR), where the load balancer simply chooses the server and forwards the request after changing only the MAC address in the packet, and the server then directly responds to the client. In this case, the load balancer and the servers are all assigned the same Virtual IP Address(VIP), but only the load balancer will respond to ARP requests. This can be done by assigning the VIP in the loopback interface in the servers.&lt;/p&gt;

&lt;p&gt;This type of load balancing is relatively inexpensive as compared to L7, although the differences are diminishing with all the improvements in technology.&lt;/p&gt;

&lt;h2 id=&quot;l7-load-balancing&quot;&gt;L7 LOAD BALANCING&lt;/h2&gt;
&lt;p&gt;This operates at the highest layer(s) of the networking stack. Here decisions on how to route the traffic are taken based on the application payload. For example, for HTTP requests, the request (URL or cookie for example) can be parsed and based on the headers/payload routing can be performed. This server should terminate the TCP connection from the client and either re-originate one with the server chosen or re-use from a pool of connections maintained.&lt;/p&gt;

&lt;p&gt;More functionality can be added here, such as redirecting requests to the right server based on the request, such as for images or videos or quote requests, etc.&lt;/p&gt;

&lt;h1 id=&quot;more-to-load-balancing&quot;&gt;MORE TO LOAD BALANCING&lt;/h1&gt;
&lt;p&gt;Load balancers are simply servers that sit in front of a cluster of different servers to distribute the load. This shouldn’t become a ‘single point of failure’ (SPOF). The load balancers need to be run in high availability mode with more servers to take over in case of failures, while remaining in sync with the active server.&lt;/p&gt;

&lt;p&gt;Load balancing also provides high availability to the servers in the cluster. When the servers can run in parallel, where many run the same backend, failure of one means the requests can simply be redirected to others. Also scaling here becomes easier, since we simply need to add more servers in case of an increase in load. But, the servers here need to be stateless, so it wouldn’t matter which server serves a request. This is not always the case.&lt;/p&gt;

&lt;h2 id=&quot;persistencestickiness&quot;&gt;PERSISTENCE/STICKINESS&lt;/h2&gt;
&lt;p&gt;A lot of requests need to preserve state, such as a shopping cart, or a wish list for examples.&lt;/p&gt;

&lt;p&gt;Some implementations use ‘stickiness’ as a factor when distributing load, where requests from the same client go to the same server. This can be done by storing information in cookies, or URL rewriting(this may not be secure, since malicious clients can change URLS and send requests), or decide based on the client’s IP+Port information. Usually some combination of these in addition to others is adopted to implement this stickiness. This should still lead to the question of how HA is now possible if a single server is attached to a session. What happens when this server fails? The session information could then be lost.&lt;/p&gt;

&lt;p&gt;In this case the state needs to be in a persistent store, so failure of a server doesn’t mean loss of data. Some in memory databases such as redis or memcached can be leveraged for this. This is not trivial since database read and write operations are not usually expensive and even for in-memory databases, we need to replicate/backup the data often to prevent the database from becoming a SPOF.&lt;/p&gt;

&lt;p&gt;Usually, just one form of load balancing is not enough. L3 load balancers sit in front of a cluster of L4 balancers which in turn distribute to a cluster of L7 balancers which eventually distribute traffic to the servers. For an example of this, we can look at Facebook’s implementation which is presented in a nice talk at &lt;a href=&quot;https://www.youtube.com/watch?v=bxhYNfFeVF4&quot;&gt;Building a billion user load balancer&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="blog" /><summary type="html">Load balancing at its simplest is defined as distributing load across a group of servers, so they appear to the clients/users as one big server. Load balancing does more than simply distribute load. It helps with redundancy. It helps with scaling the service provided, without the users having to know about it. And more. I’ll attempt to capture some of it here. This can serve as an overview to load balancing.</summary></entry></feed>